package scala.slick.lifted

class ShapeLowPriority2 {
<#list 2..22 as i>
  @inline
  implicit final def tuple${i}Shape[<#list 1..i as j>M${j}<#if i != j>,</#if></#list>, <#list 1..i as j>U${j}<#if i != j>,</#if></#list>, <#list 1..i as j>P${j}<#if i != j>,</#if></#list>](implicit <#list 1..i as j>u${j}: Shape[M${j}, U${j}, P${j}]<#if i != j>, </#if></#list>): Shape[(<#list 1..i as j>M${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>U${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>P${j}<#if i != j>,</#if></#list>)] =
    new TupleShape(<#list 1..i as j>u${j}<#if i != j>,</#if></#list>)
</#list>

  private[slick] def buildTuple(s: IndexedSeq[Any]): Product = s.length match {
<#list 1..22 as i>
    case ${i} => new Tuple${i}(<#list 1..i as j>s(${j-1})<#if i != j>, </#if></#list>)
</#list>
  }
}
